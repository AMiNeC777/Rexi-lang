
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEleftGTLTGTELTEEQUALSNOTEQUALSASSIGN BOOLEAN COMMA DIVIDE ELSE END EQUALS FOR FUNCTION GT GTE ID IF LBRACE LBRACKET LPAREN LT LTE MINUS MULTIPLY NOTEQUALS NUMBER OUTPUT PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING THEN TYPE WHILEprogram : declarationsdeclarations : declaration\n| declarations declarationdeclaration : var_declaration\n| function_declaration\n| statementvar_declaration : TYPE ID ASSIGN expression SEMICOLON\n| TYPE ID LBRACKET NUMBER RBRACKET SEMICOLONfunction_declaration : FUNCTION ID LPAREN param_list RPAREN TYPE blockparam_list :\n| param_list_not_emptyparam_list_not_empty : param\n| param_list_not_empty COMMA paramparam : TYPE IDblock : LBRACE statements RBRACEstatements :\n| statement_liststatement_list : statement\n| statement_list statementstatement : var_declaration\n| assignment\n| if_statement\n| while_loop\n| for_loop\n| function_call SEMICOLON\n| return_statement\n| output_statementassignment : ID ASSIGN expression SEMICOLON\n| array_access ASSIGN expression SEMICOLONif_statement : IF expression THEN block END\n| IF expression THEN block ELSE block ENDwhile_loop : WHILE expression blockfor_loop : FOR LPAREN assignment expression SEMICOLON assignment RPAREN blockexpression : logical_orlogical_or : logical_and\n| logical_or EQUALS logical_and\n| logical_or NOTEQUALS logical_andlogical_and : comparison\n| logical_and GT comparison\n| logical_and LT comparison\n| logical_and GTE comparison\n| logical_and LTE comparisoncomparison : arithmeticarithmetic : term\n| arithmetic PLUS term\n| arithmetic MINUS termterm : factor\n| term MULTIPLY factor\n| term DIVIDE factorfactor : NUMBER\n| STRING\n| BOOLEAN\n| ID\n| array_access\n| function_call\n| LPAREN expression RPARENarray_access : ID LBRACKET expression RBRACKETfunction_call : ID LPAREN arg_list RPARENarg_list :\n| arg_list_not_emptyarg_list_not_empty : expression\n| arg_list_not_empty COMMA expressionreturn_statement : RETURN expression SEMICOLONoutput_statement : OUTPUT expression SEMICOLON'
    
_lr_action_items = {'TYPE':([0,2,3,4,5,6,10,11,12,13,15,16,23,29,56,70,71,74,75,78,86,100,101,102,104,107,109,110,112,113,115,120,121,123,],[7,7,-2,-4,-5,-6,-21,-22,-23,-24,-26,-27,-3,-25,83,-32,7,-63,-64,-28,-29,7,-18,-20,-7,116,83,-30,-15,-19,-8,-9,-31,-33,]),'FUNCTION':([0,2,3,4,5,6,10,11,12,13,15,16,23,29,70,74,75,78,86,104,110,112,115,120,121,123,],[9,9,-2,-4,-5,-6,-21,-22,-23,-24,-26,-27,-3,-25,-32,-63,-64,-28,-29,-7,-30,-15,-8,-9,-31,-33,]),'ID':([0,2,3,4,5,6,7,9,10,11,12,13,15,16,18,19,21,22,23,25,26,27,29,30,44,46,49,59,60,61,62,63,64,65,66,67,68,70,71,72,74,75,78,80,83,86,100,101,102,104,110,112,113,114,115,120,121,123,],[8,8,-2,-4,-5,-6,24,28,-21,-22,-23,-24,-26,-27,41,41,41,41,-3,41,41,41,-25,41,41,73,41,41,41,41,41,41,41,41,41,41,41,-32,8,41,-63,-64,-28,41,108,-29,8,-18,-20,-7,-30,-15,-19,73,-8,-9,-31,-33,]),'IF':([0,2,3,4,5,6,10,11,12,13,15,16,23,29,70,71,74,75,78,86,100,101,102,104,110,112,113,115,120,121,123,],[18,18,-2,-4,-5,-6,-21,-22,-23,-24,-26,-27,-3,-25,-32,18,-63,-64,-28,-29,18,-18,-20,-7,-30,-15,-19,-8,-9,-31,-33,]),'WHILE':([0,2,3,4,5,6,10,11,12,13,15,16,23,29,70,71,74,75,78,86,100,101,102,104,110,112,113,115,120,121,123,],[19,19,-2,-4,-5,-6,-21,-22,-23,-24,-26,-27,-3,-25,-32,19,-63,-64,-28,-29,19,-18,-20,-7,-30,-15,-19,-8,-9,-31,-33,]),'FOR':([0,2,3,4,5,6,10,11,12,13,15,16,23,29,70,71,74,75,78,86,100,101,102,104,110,112,113,115,120,121,123,],[20,20,-2,-4,-5,-6,-21,-22,-23,-24,-26,-27,-3,-25,-32,20,-63,-64,-28,-29,20,-18,-20,-7,-30,-15,-19,-8,-9,-31,-33,]),'RETURN':([0,2,3,4,5,6,10,11,12,13,15,16,23,29,70,71,74,75,78,86,100,101,102,104,110,112,113,115,120,121,123,],[21,21,-2,-4,-5,-6,-21,-22,-23,-24,-26,-27,-3,-25,-32,21,-63,-64,-28,-29,21,-18,-20,-7,-30,-15,-19,-8,-9,-31,-33,]),'OUTPUT':([0,2,3,4,5,6,10,11,12,13,15,16,23,29,70,71,74,75,78,86,100,101,102,104,110,112,113,115,120,121,123,],[22,22,-2,-4,-5,-6,-21,-22,-23,-24,-26,-27,-3,-25,-32,22,-63,-64,-28,-29,22,-18,-20,-7,-30,-15,-19,-8,-9,-31,-33,]),'$end':([1,2,3,4,5,6,10,11,12,13,15,16,23,29,70,74,75,78,86,104,110,112,115,120,121,123,],[0,-1,-2,-4,-5,-6,-21,-22,-23,-24,-26,-27,-3,-25,-32,-63,-64,-28,-29,-7,-30,-15,-8,-9,-31,-33,]),'ASSIGN':([8,17,24,73,81,],[25,30,49,25,-57,]),'LPAREN':([8,18,19,20,21,22,25,26,27,28,30,41,44,49,59,60,61,62,63,64,65,66,67,68,72,78,80,86,],[26,44,44,46,44,44,44,44,44,56,44,26,44,44,44,44,44,44,44,44,44,44,44,44,44,-28,44,-29,]),'LBRACKET':([8,24,41,73,],[27,50,27,27,]),'RBRACE':([10,11,12,13,15,16,29,70,71,74,75,78,86,99,100,101,102,104,110,112,113,115,121,123,],[-21,-22,-23,-24,-26,-27,-25,-32,-16,-63,-64,-28,-29,112,-17,-18,-20,-7,-30,-15,-19,-8,-31,-33,]),'SEMICOLON':([14,32,33,34,35,36,37,38,39,40,41,42,43,47,48,51,57,76,79,81,88,89,90,91,92,93,94,95,96,97,98,103,105,],[29,-34,-35,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,74,75,78,86,104,-58,-57,-36,-37,-39,-40,-41,-42,-45,-46,-48,-49,-56,114,115,]),'NUMBER':([18,19,21,22,25,26,27,30,44,49,50,59,60,61,62,63,64,65,66,67,68,72,78,80,86,],[38,38,38,38,38,38,38,38,38,38,77,38,38,38,38,38,38,38,38,38,38,38,-28,38,-29,]),'STRING':([18,19,21,22,25,26,27,30,44,49,59,60,61,62,63,64,65,66,67,68,72,78,80,86,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-28,39,-29,]),'BOOLEAN':([18,19,21,22,25,26,27,30,44,49,59,60,61,62,63,64,65,66,67,68,72,78,80,86,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-28,40,-29,]),'RPAREN':([26,32,33,34,35,36,37,38,39,40,41,42,43,52,53,54,56,69,78,79,81,82,84,85,86,88,89,90,91,92,93,94,95,96,97,98,106,108,117,119,],[-59,-34,-35,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,79,-60,-61,-10,98,-28,-58,-57,107,-11,-12,-29,-36,-37,-39,-40,-41,-42,-45,-46,-48,-49,-56,-62,-14,-13,122,]),'THEN':([31,32,33,34,35,36,37,38,39,40,41,42,43,79,81,88,89,90,91,92,93,94,95,96,97,98,],[58,-34,-35,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,-58,-57,-36,-37,-39,-40,-41,-42,-45,-46,-48,-49,-56,]),'LBRACE':([32,33,34,35,36,37,38,39,40,41,42,43,45,58,79,81,88,89,90,91,92,93,94,95,96,97,98,111,116,122,],[-34,-35,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,71,71,-58,-57,-36,-37,-39,-40,-41,-42,-45,-46,-48,-49,-56,71,71,71,]),'COMMA':([32,33,34,35,36,37,38,39,40,41,42,43,53,54,79,81,84,85,88,89,90,91,92,93,94,95,96,97,98,106,108,117,],[-34,-35,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,80,-61,-58,-57,109,-12,-36,-37,-39,-40,-41,-42,-45,-46,-48,-49,-56,-62,-14,-13,]),'RBRACKET':([32,33,34,35,36,37,38,39,40,41,42,43,55,77,79,81,88,89,90,91,92,93,94,95,96,97,98,],[-34,-35,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,81,105,-58,-57,-36,-37,-39,-40,-41,-42,-45,-46,-48,-49,-56,]),'EQUALS':([32,33,34,35,36,37,38,39,40,41,42,43,79,81,88,89,90,91,92,93,94,95,96,97,98,],[59,-35,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,-58,-57,-36,-37,-39,-40,-41,-42,-45,-46,-48,-49,-56,]),'NOTEQUALS':([32,33,34,35,36,37,38,39,40,41,42,43,79,81,88,89,90,91,92,93,94,95,96,97,98,],[60,-35,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,-58,-57,-36,-37,-39,-40,-41,-42,-45,-46,-48,-49,-56,]),'GT':([33,34,35,36,37,38,39,40,41,42,43,79,81,88,89,90,91,92,93,94,95,96,97,98,],[61,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,-58,-57,61,61,-39,-40,-41,-42,-45,-46,-48,-49,-56,]),'LT':([33,34,35,36,37,38,39,40,41,42,43,79,81,88,89,90,91,92,93,94,95,96,97,98,],[62,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,-58,-57,62,62,-39,-40,-41,-42,-45,-46,-48,-49,-56,]),'GTE':([33,34,35,36,37,38,39,40,41,42,43,79,81,88,89,90,91,92,93,94,95,96,97,98,],[63,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,-58,-57,63,63,-39,-40,-41,-42,-45,-46,-48,-49,-56,]),'LTE':([33,34,35,36,37,38,39,40,41,42,43,79,81,88,89,90,91,92,93,94,95,96,97,98,],[64,-38,-43,-44,-47,-50,-51,-52,-53,-54,-55,-58,-57,64,64,-39,-40,-41,-42,-45,-46,-48,-49,-56,]),'PLUS':([35,36,37,38,39,40,41,42,43,79,81,94,95,96,97,98,],[65,-44,-47,-50,-51,-52,-53,-54,-55,-58,-57,-45,-46,-48,-49,-56,]),'MINUS':([35,36,37,38,39,40,41,42,43,79,81,94,95,96,97,98,],[66,-44,-47,-50,-51,-52,-53,-54,-55,-58,-57,-45,-46,-48,-49,-56,]),'MULTIPLY':([36,37,38,39,40,41,42,43,79,81,94,95,96,97,98,],[67,-47,-50,-51,-52,-53,-54,-55,-58,-57,67,67,-48,-49,-56,]),'DIVIDE':([36,37,38,39,40,41,42,43,79,81,94,95,96,97,98,],[68,-47,-50,-51,-52,-53,-54,-55,-58,-57,68,68,-48,-49,-56,]),'END':([87,112,118,],[110,-15,121,]),'ELSE':([87,112,],[111,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,2,],[3,23,]),'var_declaration':([0,2,71,100,],[4,4,102,102,]),'function_declaration':([0,2,],[5,5,]),'statement':([0,2,71,100,],[6,6,101,113,]),'assignment':([0,2,46,71,100,114,],[10,10,72,10,10,119,]),'if_statement':([0,2,71,100,],[11,11,11,11,]),'while_loop':([0,2,71,100,],[12,12,12,12,]),'for_loop':([0,2,71,100,],[13,13,13,13,]),'function_call':([0,2,18,19,21,22,25,26,27,30,44,49,59,60,61,62,63,64,65,66,67,68,71,72,80,100,],[14,14,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,14,43,43,14,]),'return_statement':([0,2,71,100,],[15,15,15,15,]),'output_statement':([0,2,71,100,],[16,16,16,16,]),'array_access':([0,2,18,19,21,22,25,26,27,30,44,46,49,59,60,61,62,63,64,65,66,67,68,71,72,80,100,114,],[17,17,42,42,42,42,42,42,42,42,42,17,42,42,42,42,42,42,42,42,42,42,42,17,42,42,17,17,]),'expression':([18,19,21,22,25,26,27,30,44,49,72,80,],[31,45,47,48,51,54,55,57,69,76,103,106,]),'logical_or':([18,19,21,22,25,26,27,30,44,49,72,80,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'logical_and':([18,19,21,22,25,26,27,30,44,49,59,60,72,80,],[33,33,33,33,33,33,33,33,33,33,88,89,33,33,]),'comparison':([18,19,21,22,25,26,27,30,44,49,59,60,61,62,63,64,72,80,],[34,34,34,34,34,34,34,34,34,34,34,34,90,91,92,93,34,34,]),'arithmetic':([18,19,21,22,25,26,27,30,44,49,59,60,61,62,63,64,72,80,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'term':([18,19,21,22,25,26,27,30,44,49,59,60,61,62,63,64,65,66,72,80,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,94,95,36,36,]),'factor':([18,19,21,22,25,26,27,30,44,49,59,60,61,62,63,64,65,66,67,68,72,80,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,96,97,37,37,]),'arg_list':([26,],[52,]),'arg_list_not_empty':([26,],[53,]),'block':([45,58,111,116,122,],[70,87,118,120,123,]),'param_list':([56,],[82,]),'param_list_not_empty':([56,],[84,]),'param':([56,109,],[85,117,]),'statements':([71,],[99,]),'statement_list':([71,],[100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','CompilerRexi.py',252),
  ('declarations -> declaration','declarations',1,'p_declarations','CompilerRexi.py',256),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','CompilerRexi.py',257),
  ('declaration -> var_declaration','declaration',1,'p_declaration','CompilerRexi.py',264),
  ('declaration -> function_declaration','declaration',1,'p_declaration','CompilerRexi.py',265),
  ('declaration -> statement','declaration',1,'p_declaration','CompilerRexi.py',266),
  ('var_declaration -> TYPE ID ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','CompilerRexi.py',270),
  ('var_declaration -> TYPE ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration','CompilerRexi.py',271),
  ('function_declaration -> FUNCTION ID LPAREN param_list RPAREN TYPE block','function_declaration',7,'p_function_declaration','CompilerRexi.py',278),
  ('param_list -> <empty>','param_list',0,'p_param_list','CompilerRexi.py',282),
  ('param_list -> param_list_not_empty','param_list',1,'p_param_list','CompilerRexi.py',283),
  ('param_list_not_empty -> param','param_list_not_empty',1,'p_param_list_not_empty','CompilerRexi.py',287),
  ('param_list_not_empty -> param_list_not_empty COMMA param','param_list_not_empty',3,'p_param_list_not_empty','CompilerRexi.py',288),
  ('param -> TYPE ID','param',2,'p_param','CompilerRexi.py',295),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','CompilerRexi.py',299),
  ('statements -> <empty>','statements',0,'p_statements','CompilerRexi.py',303),
  ('statements -> statement_list','statements',1,'p_statements','CompilerRexi.py',304),
  ('statement_list -> statement','statement_list',1,'p_statement_list','CompilerRexi.py',308),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','CompilerRexi.py',309),
  ('statement -> var_declaration','statement',1,'p_statement','CompilerRexi.py',316),
  ('statement -> assignment','statement',1,'p_statement','CompilerRexi.py',317),
  ('statement -> if_statement','statement',1,'p_statement','CompilerRexi.py',318),
  ('statement -> while_loop','statement',1,'p_statement','CompilerRexi.py',319),
  ('statement -> for_loop','statement',1,'p_statement','CompilerRexi.py',320),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','CompilerRexi.py',321),
  ('statement -> return_statement','statement',1,'p_statement','CompilerRexi.py',322),
  ('statement -> output_statement','statement',1,'p_statement','CompilerRexi.py',323),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','CompilerRexi.py',327),
  ('assignment -> array_access ASSIGN expression SEMICOLON','assignment',4,'p_assignment','CompilerRexi.py',328),
  ('if_statement -> IF expression THEN block END','if_statement',5,'p_if_statement','CompilerRexi.py',335),
  ('if_statement -> IF expression THEN block ELSE block END','if_statement',7,'p_if_statement','CompilerRexi.py',336),
  ('while_loop -> WHILE expression block','while_loop',3,'p_while_loop','CompilerRexi.py',343),
  ('for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN block','for_loop',8,'p_for_loop','CompilerRexi.py',347),
  ('expression -> logical_or','expression',1,'p_expression','CompilerRexi.py',351),
  ('logical_or -> logical_and','logical_or',1,'p_logical_or','CompilerRexi.py',355),
  ('logical_or -> logical_or EQUALS logical_and','logical_or',3,'p_logical_or','CompilerRexi.py',356),
  ('logical_or -> logical_or NOTEQUALS logical_and','logical_or',3,'p_logical_or','CompilerRexi.py',357),
  ('logical_and -> comparison','logical_and',1,'p_logical_and','CompilerRexi.py',364),
  ('logical_and -> logical_and GT comparison','logical_and',3,'p_logical_and','CompilerRexi.py',365),
  ('logical_and -> logical_and LT comparison','logical_and',3,'p_logical_and','CompilerRexi.py',366),
  ('logical_and -> logical_and GTE comparison','logical_and',3,'p_logical_and','CompilerRexi.py',367),
  ('logical_and -> logical_and LTE comparison','logical_and',3,'p_logical_and','CompilerRexi.py',368),
  ('comparison -> arithmetic','comparison',1,'p_comparison','CompilerRexi.py',375),
  ('arithmetic -> term','arithmetic',1,'p_arithmetic','CompilerRexi.py',379),
  ('arithmetic -> arithmetic PLUS term','arithmetic',3,'p_arithmetic','CompilerRexi.py',380),
  ('arithmetic -> arithmetic MINUS term','arithmetic',3,'p_arithmetic','CompilerRexi.py',381),
  ('term -> factor','term',1,'p_term','CompilerRexi.py',388),
  ('term -> term MULTIPLY factor','term',3,'p_term','CompilerRexi.py',389),
  ('term -> term DIVIDE factor','term',3,'p_term','CompilerRexi.py',390),
  ('factor -> NUMBER','factor',1,'p_factor','CompilerRexi.py',397),
  ('factor -> STRING','factor',1,'p_factor','CompilerRexi.py',398),
  ('factor -> BOOLEAN','factor',1,'p_factor','CompilerRexi.py',399),
  ('factor -> ID','factor',1,'p_factor','CompilerRexi.py',400),
  ('factor -> array_access','factor',1,'p_factor','CompilerRexi.py',401),
  ('factor -> function_call','factor',1,'p_factor','CompilerRexi.py',402),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','CompilerRexi.py',403),
  ('array_access -> ID LBRACKET expression RBRACKET','array_access',4,'p_array_access','CompilerRexi.py',420),
  ('function_call -> ID LPAREN arg_list RPAREN','function_call',4,'p_function_call','CompilerRexi.py',424),
  ('arg_list -> <empty>','arg_list',0,'p_arg_list','CompilerRexi.py',428),
  ('arg_list -> arg_list_not_empty','arg_list',1,'p_arg_list','CompilerRexi.py',429),
  ('arg_list_not_empty -> expression','arg_list_not_empty',1,'p_arg_list_not_empty','CompilerRexi.py',433),
  ('arg_list_not_empty -> arg_list_not_empty COMMA expression','arg_list_not_empty',3,'p_arg_list_not_empty','CompilerRexi.py',434),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','CompilerRexi.py',441),
  ('output_statement -> OUTPUT expression SEMICOLON','output_statement',3,'p_output_statement','CompilerRexi.py',445),
]
